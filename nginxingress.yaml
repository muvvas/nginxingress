apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubernetes.io/created-by: |
      {"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicationController","namespace":"kube-system","name":"nginx-ingress-controller","uid":"5c2d1c31-8e08-11e7-82bd-080027926c2a","apiVersion":"v1","resourceVersion":"30479"}}
  creationTimestamp: 2017-08-31T04:53:41Z
  generateName: nginx-ingress-controller-
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    app: nginx-ingress-controller
    name: nginx-ingress-controller
  name: nginx-ingress-controller-h7sss
  namespace: kube-system
  ownerReferences:
  - apiVersion: v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicationController
    name: nginx-ingress-controller
    uid: 5c2d1c31-8e08-11e7-82bd-080027926c2a
  resourceVersion: "30562"
  selfLink: /api/v1/namespaces/kube-system/pods/nginx-ingress-controller-h7sss
  uid: 5c2df453-8e08-11e7-82bd-080027926c2a
spec:
  containers:
  - args:
    - /nginx-ingress-controller
    - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
    - --configmap=$(POD_NAMESPACE)/nginx-load-balancer-conf
    env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    image: gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.11
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    name: nginx-ingress-controller
    ports:
    - containerPort: 80
      hostPort: 80
      protocol: TCP
    - containerPort: 443
      hostPort: 443
      protocol: TCP
    - containerPort: 18080
      hostPort: 18080
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 10254
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-1qpz5
      readOnly: true
  dnsPolicy: ClusterFirst
  nodeName: minikube
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 60
  volumes:
  - name: default-token-1qpz5
    secret:
      defaultMode: 420
      secretName: default-token-1qpz5
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: 2017-08-31T04:53:41Z
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: 2017-08-31T04:54:31Z
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: 2017-08-31T04:53:41Z
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://92c1d6d9d92f2467b596af3f4e621a7440ec90069796386663a4d3253100bb50
    image: gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.11
    imageID: docker-pullable://gcr.io/google_containers/nginx-ingress-controller@sha256:03fd8fc46018d09b4050d4daaf50bff73c80936994b374319ed33cbb2c1684f4
    lastState: {}
    name: nginx-ingress-controller
    ready: true
    restartCount: 0
    state:
      running:
        startedAt: 2017-08-31T04:54:23Z
  hostIP: 192.168.99.100
  phase: Running
  podIP: 172.17.0.12
  qosClass: BestEffort
  startTime: 2017-08-31T04:53:41Z
